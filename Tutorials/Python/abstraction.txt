Abstract Base Classes (ABCs):
Before diving into the @abstractmethod decorator, it's important to understand what an abstract base class is.
An ABC provides a blueprint for other classes to follow, defining methods that must be implemented by its subclasses.
This is useful in scenarios where you want to set a common interface for a group of related classes.

Pythonâ€™s abc module enables the creation of abstract base classes. To define an ABC, you inherit from ABC,
which is provided by the abc module.

The @abstractmethod Decorator:
The @abstractmethod decorator is used to indicate that a method is an abstract method.
This means that the method does not need to be implemented in the abstract class itself,
but must be implemented in any subclass that inherits from the abstract class.


from abc import ABC, abstractmethod

class Polygon(ABC):

    @abstractmethod
    def noofsides(self):
        pass

class Triangle(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 3 sides")

class Pentagon(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 5 sides")

class Hexagon(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 6 sides")

class Quadrilateral(Polygon):

    # overriding abstract method
    def noofsides(self):
        print("I have 4 sides")

# Driver code
R = Triangle()
R.noofsides()

K = Quadrilateral()
K.noofsides()

R = Pentagon()
R.noofsides()

K = Hexagon()
K.noofsides()
Output:


I have 3 sides
I have 4 sides
I have 5 sides
I have 6 sides